#!/usr/bin/env python3

import sys
import os
os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = "hide"
import curses
from curses import wrapper
import random
import signal

mixer = None

def main(stdscr):

    music_dir = os.path.expanduser('~/media/music/')
    songs = [song[:-4] for song in os.listdir(music_dir)]
    random.shuffle(songs)
    current_song_index = 0
    playing_song_index = None
    scroll_offset = 0
    is_paused = False
    is_initialized = False

    curses.start_color()
    curses.use_default_colors()
    for i in range(0, curses.COLORS):
        curses.init_pair(i + 1, i, -1)
    curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_BLACK, curses.COLOR_WHITE)
    curses.init_pair(3, curses.COLOR_YELLOW, curses.COLOR_BLACK)
    curses.init_pair(4, curses.COLOR_YELLOW, curses.COLOR_WHITE)

    def redraw_window():
        height, width = stdscr.getmaxyx()

        for i, song in enumerate(songs[scroll_offset:scroll_offset + height]):
            x = 0
            y = i

            if y >= height:
                break

            if len(song) > width - 1:
                song = song[:width-1]

            if i + scroll_offset == current_song_index and i + scroll_offset == playing_song_index:
                stdscr.addstr(y, x, song, curses.color_pair(4))
            elif i + scroll_offset == playing_song_index:
                stdscr.addstr(y, x, song, curses.color_pair(3))
            elif i + scroll_offset == current_song_index:
                stdscr.addstr(y, x, song, curses.color_pair(2))
            else:
                stdscr.addstr(y, x, song, curses.color_pair(1))

            stdscr.clrtoeol()

        stdscr.refresh()

    def initialize_mixer():
        nonlocal is_initialized
        if is_initialized: return
        global mixer
        from pygame import mixer
        mixer.init()
        is_initialized = True

    def toggle_pause(signo, stack_frame):
        nonlocal is_paused
        initialize_mixer()
        if is_paused:
            mixer.music.unpause()
            is_paused = False
        else:
            mixer.music.pause()
            is_paused = True

    def next_song(signo, stack_frame):
        nonlocal playing_song_index
        initialize_mixer()
        if playing_song_index is None:
            playing_song_index = 1
        else:
            playing_song_index = min(playing_song_index + 1, len(songs) - 1)
        song_path = os.path.join(music_dir, songs[playing_song_index])
        song_path += ".mp3"
        mixer.music.load(song_path)
        mixer.music.play()

    def prev_song(signo, stack_frame):
        nonlocal playing_song_index
        initialize_mixer()
        if playing_song_index is None:
            playing_song_index = 0
        else:
            playing_song_index = max(playing_song_index - 1, 0)
        song_path = os.path.join(music_dir, songs[playing_song_index])
        song_path += ".mp3"
        mixer.music.load(song_path)
        mixer.music.play()

    def check_end_and_play_next():
        nonlocal playing_song_index
        initialize_mixer()
        if not mixer.music.get_busy():
            next_song(None, None)

    signal.signal(signal.SIGRTMIN + 10, next_song)
    signal.signal(signal.SIGRTMIN + 11, prev_song)
    signal.signal(signal.SIGRTMIN + 12, toggle_pause)

    while True:
        redraw_window()
        key = stdscr.getch()

        if key == ord('j'):
            current_song_index = min(current_song_index + 1, len(songs) - 1)
        elif key == ord('k'):
            current_song_index = max(current_song_index - 1, 0)
        elif key == ord('\n'):
            is_paused = False
            playing_song_index = current_song_index
            song_path = os.path.join(music_dir, songs[current_song_index])
            song_path += ".mp3"
            initialize_mixer()
            mixer.music.load(song_path)
            mixer.music.play()
        elif key == ord(' '):
            toggle_pause(None, None)
        elif key == ord('G'):
            current_song_index = len(songs) - 1
        elif key == ord('g'):
            current_song_index = 0
        elif key == ord('q'):
            break

        height, _ = stdscr.getmaxyx()
        if current_song_index < scroll_offset:
            scroll_offset = max(0, current_song_index)
        elif current_song_index >= scroll_offset + height:
            scroll_offset = min(len(songs) - height, current_song_index - height + 1)

        check_end_and_play_next()

if __name__ == "__main__":
    wrapper(main)
